type token =
  | INT of (int)
  | BOOL of (bool)
  | STRING of (string)
  | VAR of (string)
  | PLUS
  | AND
  | EQ
  | CAT
  | LET
  | LETF
  | IN
  | IF
  | THEN_
  | ELSE
  | PAIR
  | FST
  | SND
  | UNIT
  | SEMICOLON
  | PRINT
  | COMMA
  | EQEQ
  | SUBS
  | MULT
  | DIV
  | LEQ
  | LPAREN
  | RPAREN
  | EOL

open Parsing;;
let _ = parse_error;;
let yytransl_const = [|
  261 (* PLUS *);
  262 (* AND *);
  263 (* EQ *);
  264 (* CAT *);
  265 (* LET *);
  266 (* LETF *);
  267 (* IN *);
  268 (* IF *);
  269 (* THEN_ *);
  270 (* ELSE *);
  271 (* PAIR *);
  272 (* FST *);
  273 (* SND *);
  274 (* UNIT *);
  275 (* SEMICOLON *);
  276 (* PRINT *);
  277 (* COMMA *);
  278 (* EQEQ *);
  279 (* SUBS *);
  280 (* MULT *);
  281 (* DIV *);
  282 (* LEQ *);
  283 (* LPAREN *);
  284 (* RPAREN *);
  285 (* EOL *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* BOOL *);
  259 (* STRING *);
  260 (* VAR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\001\000\001\000\005\000\003\000\
\006\000\006\000\007\000\004\000\003\000\002\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\002\000\003\000\004\000\006\000\000\000\000\000\
\000\000\000\000\005\000\000\000\000\000\025\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
\000\000\000\000\000\000\000\000\000\000\008\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\
\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\014\000\032\000"

let yysindex = "\012\000\
\093\000\000\000\000\000\000\000\000\000\000\000\253\254\093\000\
\093\000\093\000\000\000\093\000\093\000\000\000\056\255\255\254\
\141\255\020\000\020\000\168\255\085\255\093\000\093\000\093\000\
\093\000\093\000\093\000\093\000\093\000\093\000\000\000\020\000\
\007\255\093\000\093\000\093\000\093\000\000\000\074\000\074\000\
\113\000\074\000\047\000\074\000\113\000\113\000\047\000\093\000\
\195\255\222\255\020\000\113\255\249\255\093\000\093\000\000\000\
\093\000\020\000\020\000\020\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\247\254\051\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\070\001\
\000\000\000\000\000\000\000\000\000\000\000\000\203\000\222\000\
\128\000\241\000\028\001\004\001\153\000\178\000\047\001\000\000\
\000\000\000\000\074\001\014\001\000\000\000\000\000\000\000\000\
\000\000\081\001\093\001\100\001"

let yygindex = "\000\000\
\000\000\255\255"

let yytablesize = 641
let yytable = "\015\000\
\016\000\014\000\033\000\014\000\014\000\034\000\017\000\018\000\
\019\000\014\000\020\000\021\000\001\000\048\000\000\000\000\000\
\000\000\000\000\014\000\014\000\039\000\040\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\000\000\000\000\000\000\
\049\000\050\000\051\000\052\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\053\000\000\000\
\000\000\000\000\000\000\000\000\058\000\059\000\000\000\060\000\
\003\000\004\000\005\000\006\000\022\000\023\000\000\000\024\000\
\007\000\000\000\000\000\008\000\000\000\000\000\000\000\009\000\
\010\000\011\000\000\000\012\000\025\000\026\000\027\000\028\000\
\029\000\030\000\013\000\000\000\031\000\003\000\004\000\005\000\
\006\000\022\000\023\000\000\000\024\000\007\000\000\000\000\000\
\008\000\000\000\000\000\000\000\009\000\010\000\011\000\000\000\
\012\000\037\000\026\000\027\000\028\000\029\000\030\000\013\000\
\038\000\003\000\004\000\005\000\006\000\000\000\000\000\000\000\
\024\000\007\000\000\000\000\000\008\000\000\000\000\000\000\000\
\009\000\010\000\011\000\000\000\000\000\000\000\000\000\000\000\
\028\000\029\000\000\000\013\000\056\000\003\000\004\000\005\000\
\006\000\022\000\023\000\000\000\024\000\007\000\000\000\000\000\
\008\000\035\000\000\000\000\000\009\000\010\000\011\000\000\000\
\012\000\025\000\026\000\027\000\028\000\029\000\030\000\013\000\
\003\000\004\000\005\000\006\000\022\000\023\000\000\000\024\000\
\007\000\000\000\000\000\008\000\000\000\000\000\000\000\009\000\
\010\000\011\000\036\000\012\000\025\000\026\000\027\000\028\000\
\029\000\030\000\013\000\003\000\004\000\005\000\006\000\022\000\
\023\000\000\000\024\000\007\000\000\000\054\000\008\000\000\000\
\000\000\000\000\009\000\010\000\011\000\000\000\012\000\025\000\
\026\000\027\000\028\000\029\000\030\000\013\000\003\000\004\000\
\005\000\006\000\022\000\023\000\000\000\024\000\007\000\000\000\
\000\000\008\000\000\000\055\000\000\000\009\000\010\000\011\000\
\000\000\012\000\025\000\026\000\027\000\028\000\029\000\030\000\
\013\000\003\000\004\000\005\000\006\000\022\000\023\000\000\000\
\024\000\007\000\000\000\057\000\008\000\000\000\000\000\000\000\
\009\000\010\000\011\000\000\000\012\000\025\000\026\000\027\000\
\028\000\029\000\030\000\013\000\003\000\004\000\005\000\006\000\
\022\000\023\000\000\000\024\000\007\000\000\000\000\000\008\000\
\000\000\000\000\000\000\009\000\010\000\011\000\000\000\012\000\
\025\000\026\000\027\000\028\000\029\000\030\000\013\000\003\000\
\004\000\005\000\006\000\022\000\023\000\000\000\024\000\007\000\
\000\000\000\000\008\000\000\000\000\000\000\000\009\000\010\000\
\011\000\000\000\000\000\025\000\000\000\027\000\028\000\029\000\
\000\000\013\000\003\000\004\000\005\000\006\000\000\000\000\000\
\000\000\024\000\007\000\000\000\000\000\008\000\000\000\000\000\
\000\000\009\000\010\000\011\000\000\000\003\000\004\000\005\000\
\006\000\028\000\029\000\000\000\013\000\007\000\000\000\000\000\
\008\000\000\000\000\000\000\000\009\000\010\000\011\000\000\000\
\012\000\003\000\004\000\005\000\006\000\000\000\000\000\013\000\
\000\000\007\000\000\000\000\000\008\000\000\000\000\000\000\000\
\009\000\010\000\011\000\000\000\023\000\023\000\000\000\023\000\
\000\000\000\000\023\000\013\000\023\000\023\000\000\000\000\000\
\000\000\000\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\000\000\023\000\023\000\018\000\018\000\000\000\
\018\000\000\000\000\000\018\000\000\000\018\000\018\000\000\000\
\000\000\000\000\000\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\000\000\018\000\018\000\019\000\019\000\
\000\000\019\000\000\000\000\000\019\000\000\000\019\000\019\000\
\000\000\000\000\000\000\000\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\000\000\019\000\019\000\016\000\
\016\000\000\000\000\000\000\000\000\000\016\000\000\000\016\000\
\016\000\000\000\000\000\000\000\000\000\016\000\016\000\016\000\
\016\000\016\000\020\000\020\000\016\000\000\000\016\000\016\000\
\020\000\000\000\020\000\020\000\000\000\000\000\000\000\000\000\
\020\000\020\000\020\000\020\000\020\000\013\000\013\000\020\000\
\000\000\020\000\020\000\013\000\000\000\013\000\013\000\000\000\
\000\000\000\000\000\000\013\000\013\000\013\000\013\000\013\000\
\017\000\017\000\013\000\000\000\013\000\013\000\017\000\000\000\
\017\000\017\000\013\000\013\000\000\000\000\000\017\000\017\000\
\017\000\017\000\017\000\000\000\000\000\017\000\000\000\017\000\
\017\000\013\000\013\000\013\000\013\000\000\000\021\000\013\000\
\021\000\021\000\000\000\000\000\000\000\000\000\021\000\021\000\
\000\000\021\000\000\000\000\000\000\000\021\000\000\000\021\000\
\021\000\022\000\000\000\022\000\022\000\015\000\000\000\015\000\
\015\000\022\000\022\000\000\000\022\000\015\000\000\000\000\000\
\022\000\000\000\022\000\022\000\000\000\000\000\015\000\015\000\
\024\000\000\000\024\000\024\000\012\000\000\000\012\000\012\000\
\024\000\000\000\000\000\010\000\012\000\010\000\010\000\000\000\
\000\000\024\000\024\000\010\000\000\000\012\000\012\000\009\000\
\000\000\009\000\009\000\000\000\010\000\010\000\011\000\009\000\
\011\000\011\000\000\000\000\000\000\000\000\000\011\000\000\000\
\009\000\009\000\000\000\000\000\000\000\000\000\000\000\011\000\
\011\000"

let yycheck = "\001\000\
\004\001\011\001\004\001\013\001\014\001\007\001\008\000\009\000\
\010\000\019\001\012\000\013\000\001\000\007\001\255\255\255\255\
\255\255\255\255\028\001\029\001\022\000\023\000\024\000\025\000\
\026\000\027\000\028\000\029\000\030\000\255\255\255\255\255\255\
\034\000\035\000\036\000\037\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\048\000\255\255\
\255\255\255\255\255\255\255\255\054\000\055\000\255\255\057\000\
\001\001\002\001\003\001\004\001\005\001\006\001\255\255\008\001\
\009\001\255\255\255\255\012\001\255\255\255\255\255\255\016\001\
\017\001\018\001\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\029\001\001\001\002\001\003\001\
\004\001\005\001\006\001\255\255\008\001\009\001\255\255\255\255\
\012\001\255\255\255\255\255\255\016\001\017\001\018\001\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\001\001\002\001\003\001\004\001\255\255\255\255\255\255\
\008\001\009\001\255\255\255\255\012\001\255\255\255\255\255\255\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\024\001\025\001\255\255\027\001\028\001\001\001\002\001\003\001\
\004\001\005\001\006\001\255\255\008\001\009\001\255\255\255\255\
\012\001\013\001\255\255\255\255\016\001\017\001\018\001\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\001\001\002\001\003\001\004\001\005\001\006\001\255\255\008\001\
\009\001\255\255\255\255\012\001\255\255\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\001\001\002\001\003\001\004\001\005\001\
\006\001\255\255\008\001\009\001\255\255\011\001\012\001\255\255\
\255\255\255\255\016\001\017\001\018\001\255\255\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\001\001\002\001\
\003\001\004\001\005\001\006\001\255\255\008\001\009\001\255\255\
\255\255\012\001\255\255\014\001\255\255\016\001\017\001\018\001\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\001\001\002\001\003\001\004\001\005\001\006\001\255\255\
\008\001\009\001\255\255\011\001\012\001\255\255\255\255\255\255\
\016\001\017\001\018\001\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\001\001\002\001\003\001\004\001\
\005\001\006\001\255\255\008\001\009\001\255\255\255\255\012\001\
\255\255\255\255\255\255\016\001\017\001\018\001\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\001\001\
\002\001\003\001\004\001\005\001\006\001\255\255\008\001\009\001\
\255\255\255\255\012\001\255\255\255\255\255\255\016\001\017\001\
\018\001\255\255\255\255\021\001\255\255\023\001\024\001\025\001\
\255\255\027\001\001\001\002\001\003\001\004\001\255\255\255\255\
\255\255\008\001\009\001\255\255\255\255\012\001\255\255\255\255\
\255\255\016\001\017\001\018\001\255\255\001\001\002\001\003\001\
\004\001\024\001\025\001\255\255\027\001\009\001\255\255\255\255\
\012\001\255\255\255\255\255\255\016\001\017\001\018\001\255\255\
\020\001\001\001\002\001\003\001\004\001\255\255\255\255\027\001\
\255\255\009\001\255\255\255\255\012\001\255\255\255\255\255\255\
\016\001\017\001\018\001\255\255\005\001\006\001\255\255\008\001\
\255\255\255\255\011\001\027\001\013\001\014\001\255\255\255\255\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\255\255\028\001\029\001\005\001\006\001\255\255\
\008\001\255\255\255\255\011\001\255\255\013\001\014\001\255\255\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\028\001\029\001\005\001\006\001\
\255\255\008\001\255\255\255\255\011\001\255\255\013\001\014\001\
\255\255\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\255\255\028\001\029\001\005\001\
\006\001\255\255\255\255\255\255\255\255\011\001\255\255\013\001\
\014\001\255\255\255\255\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\005\001\006\001\026\001\255\255\028\001\029\001\
\011\001\255\255\013\001\014\001\255\255\255\255\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\005\001\006\001\026\001\
\255\255\028\001\029\001\011\001\255\255\013\001\014\001\255\255\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\005\001\006\001\026\001\255\255\028\001\029\001\011\001\255\255\
\013\001\014\001\005\001\006\001\255\255\255\255\019\001\020\001\
\021\001\022\001\023\001\255\255\255\255\026\001\255\255\028\001\
\029\001\020\001\021\001\022\001\023\001\255\255\011\001\026\001\
\013\001\014\001\255\255\255\255\255\255\255\255\019\001\020\001\
\255\255\022\001\255\255\255\255\255\255\026\001\255\255\028\001\
\029\001\011\001\255\255\013\001\014\001\011\001\255\255\013\001\
\014\001\019\001\020\001\255\255\022\001\019\001\255\255\255\255\
\026\001\255\255\028\001\029\001\255\255\255\255\028\001\029\001\
\011\001\255\255\013\001\014\001\011\001\255\255\013\001\014\001\
\019\001\255\255\255\255\011\001\019\001\013\001\014\001\255\255\
\255\255\028\001\029\001\019\001\255\255\028\001\029\001\011\001\
\255\255\013\001\014\001\255\255\028\001\029\001\011\001\019\001\
\013\001\014\001\255\255\255\255\255\255\255\255\019\001\255\255\
\028\001\029\001\255\255\255\255\255\255\255\255\255\255\028\001\
\029\001"

let yynames_const = "\
  PLUS\000\
  AND\000\
  EQ\000\
  CAT\000\
  LET\000\
  LETF\000\
  IN\000\
  IF\000\
  THEN_\000\
  ELSE\000\
  PAIR\000\
  FST\000\
  SND\000\
  UNIT\000\
  SEMICOLON\000\
  PRINT\000\
  COMMA\000\
  EQEQ\000\
  SUBS\000\
  MULT\000\
  DIV\000\
  LEQ\000\
  LPAREN\000\
  RPAREN\000\
  EOL\000\
  "

let yynames_block = "\
  INT\000\
  BOOL\000\
  STRING\000\
  VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'tyrme_exp) in
    Obj.repr(
# 15 "parser.mly"
                               ( _1 )
# 327 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 18 "parser.mly"
                                 ( Ast.Const(Ast.Int _1) )
# 334 "parser.ml"
               : 'tyrme_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 19 "parser.mly"
                                 ( Ast.Const(Ast.Bool _1) )
# 341 "parser.ml"
               : 'tyrme_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 20 "parser.mly"
                                 ( Ast.Const(Ast.String _1) )
# 348 "parser.ml"
               : 'tyrme_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 21 "parser.mly"
                                 ( Ast.Const(Ast.Unit) )
# 354 "parser.ml"
               : 'tyrme_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 22 "parser.mly"
                                 ( Ast.Var(_1) )
# 361 "parser.ml"
               : 'tyrme_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'tyrme_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'tyrme_exp) in
    Obj.repr(
# 24 "parser.mly"
                                              ( Ast.Pair(_2,_4) )
# 369 "parser.ml"
               : 'tyrme_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tyrme_exp) in
    Obj.repr(
# 25 "parser.mly"
                                 ( _2 )
# 376 "parser.ml"
               : 'tyrme_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'tyrme_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tyrme_exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'tyrme_exp) in
    Obj.repr(
# 27 "parser.mly"
                                                  ( Ast.If(_2,_4,_6) )
# 385 "parser.ml"
               : 'tyrme_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tyrme_exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'tyrme_exp) in
    Obj.repr(
# 29 "parser.mly"
                                              ( Ast.Let(_2,_4,_6) )
# 394 "parser.ml"
               : 'tyrme_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'tyrme_exp) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'tyrme_exp) in
    Obj.repr(
# 30 "parser.mly"
                                              ( Ast.Letf(_2,_3,_5,_7) )
# 404 "parser.ml"
               : 'tyrme_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tyrme_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'tyrme_exp) in
    Obj.repr(
# 31 "parser.mly"
                                              ( Ast.Print(_2,_4) )
# 412 "parser.ml"
               : 'tyrme_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tyrme_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tyrme_exp) in
    Obj.repr(
# 33 "parser.mly"
                                 ( Ast.Pair(_1,_3) )
# 420 "parser.ml"
               : 'tyrme_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tyrme_exp) in
    Obj.repr(
# 35 "parser.mly"
                                 ( Ast.Fst(_2) )
# 427 "parser.ml"
               : 'tyrme_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tyrme_exp) in
    Obj.repr(
# 36 "parser.mly"
                                 ( Ast.Snd(_2) )
# 434 "parser.ml"
               : 'tyrme_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tyrme_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tyrme_exp) in
    Obj.repr(
# 38 "parser.mly"
                                 ( Ast.Binop(Ast.Add,_1,_3) )
# 442 "parser.ml"
               : 'tyrme_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tyrme_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tyrme_exp) in
    Obj.repr(
# 39 "parser.mly"
                                 ( Ast.Binop(Ast.Sub,_1,_3) )
# 450 "parser.ml"
               : 'tyrme_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tyrme_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tyrme_exp) in
    Obj.repr(
# 40 "parser.mly"
                                 ( Ast.Binop(Ast.Mult,_1,_3) )
# 458 "parser.ml"
               : 'tyrme_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tyrme_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tyrme_exp) in
    Obj.repr(
# 41 "parser.mly"
                                ( Ast.Binop(Ast.Div,_1,_3) )
# 466 "parser.ml"
               : 'tyrme_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tyrme_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tyrme_exp) in
    Obj.repr(
# 43 "parser.mly"
                                 ( Ast.Binop(Ast.And,_1,_3) )
# 474 "parser.ml"
               : 'tyrme_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tyrme_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tyrme_exp) in
    Obj.repr(
# 44 "parser.mly"
                                   ( Ast.Binop(Ast.Eq,_1,_3) )
# 482 "parser.ml"
               : 'tyrme_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tyrme_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tyrme_exp) in
    Obj.repr(
# 45 "parser.mly"
                                  ( Ast.Binop(Ast.Leq,_1,_3) )
# 490 "parser.ml"
               : 'tyrme_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tyrme_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tyrme_exp) in
    Obj.repr(
# 46 "parser.mly"
                                 ( Ast.Binop(Ast.Cat,_1,_3) )
# 498 "parser.ml"
               : 'tyrme_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'tyrme_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tyrme_exp) in
    Obj.repr(
# 48 "parser.mly"
                                 ( Ast.Binop(Ast.App,_1,_2) )
# 506 "parser.ml"
               : 'tyrme_exp))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.expr)
